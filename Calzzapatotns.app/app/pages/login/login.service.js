"use strict";
var core_1 = require("@angular/core");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var http_service_1 = require("../../custom-http/http-service");
var LoginService = (function () {
    function LoginService(http) {
        this.http = http;
    }
    LoginService.prototype.login = function (user) {
        return this.http.login("login", { email: user.email, password: user.password.replace("\n\n", "") }).map(function (response) { return response.json(); });
    };
    LoginService.prototype.sincronizacion = function () {
        console.log("Entro servicio de sincronizacion");
        return this.http.get("sincronizacion", {}).map(function (response) { return response.json(); });
    };
    LoginService.prototype.recuperarPassword = function (dato) {
        console.log("recuperarPassword", JSON.stringify(dato));
        return this.http.login("recuperarcontrasena/" + dato.usuario, { email: dato.email, telefono: dato.celular }).map(function (response) { return response.json(); });
    };
    LoginService.prototype.cambiarPassword = function (dato) {
        return this.http.login("actualizarcontrasena/" + dato.cliente_id, dato.dato).map(function (response) { return response.json(); });
    };
    LoginService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_service_1.HttpService])
    ], LoginService);
    return LoginService;
}());
exports.LoginService = LoginService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF5QixlQUFlLENBQUMsQ0FBQTtBQUd6QyxRQUFPLHNCQUFzQixDQUFDLENBQUE7QUFDOUIsUUFBTyx1QkFBdUIsQ0FBQyxDQUFBO0FBSS9CLDZCQUEwQixnQ0FBZ0MsQ0FBQyxDQUFBO0FBRzNEO0lBRUksc0JBQW9CLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFDckMsQ0FBQztJQUVELDRCQUFLLEdBQUwsVUFBTSxJQUFVO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBZixDQUFlLENBQUMsQ0FBQztJQUN0SSxDQUFDO0lBRUQscUNBQWMsR0FBZDtRQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCx3Q0FBaUIsR0FBakIsVUFBa0IsSUFBSTtRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEdBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsS0FBSyxFQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7SUFDM0ksQ0FBQztJQUNELHNDQUFlLEdBQWYsVUFBZ0IsSUFBSTtRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEdBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO0lBQ2hILENBQUM7SUFyQkw7UUFBQyxpQkFBVSxFQUFFOztvQkFBQTtJQXNCYixtQkFBQztBQUFELENBQUMsQUFyQkQsSUFxQkM7QUFyQlksb0JBQVksZUFxQnhCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge0h0dHAsIEhlYWRlcnMsIFJlc3BvbnNlfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqcy9SeFwiO1xuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvZG9cIjtcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL21hcFwiO1xuXG5pbXBvcnQge1VzZXJ9IGZyb20gXCIuL3VzZXIuY2xhc3NcIjtcbmltcG9ydCB7Q29uZmlnfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2NvbmZpZ1wiO1xuaW1wb3J0IHtIdHRwU2VydmljZX0gZnJvbSBcIi4uLy4uL2N1c3RvbS1odHRwL2h0dHAtc2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9naW5TZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBsb2dpbih1c2VyOiBVc2VyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAubG9naW4oXCJsb2dpblwiLCB7ZW1haWw6IHVzZXIuZW1haWwsIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkLnJlcGxhY2UoXCJcXG5cXG5cIixcIlwiKX0pLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpO1xuICAgIH1cblxuICAgIHNpbmNyb25pemFjaW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVudHJvIHNlcnZpY2lvIGRlIHNpbmNyb25pemFjaW9uXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChcInNpbmNyb25pemFjaW9uXCIsIHt9KS5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKTtcbiAgICB9XG5cbiAgICByZWN1cGVyYXJQYXNzd29yZChkYXRvKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVjdXBlcmFyUGFzc3dvcmRcIixKU09OLnN0cmluZ2lmeShkYXRvKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAubG9naW4oXCJyZWN1cGVyYXJjb250cmFzZW5hL1wiK2RhdG8udXN1YXJpbywge2VtYWlsOmRhdG8uZW1haWwsdGVsZWZvbm86ZGF0by5jZWx1bGFyfSkubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgfVxuICAgIGNhbWJpYXJQYXNzd29yZChkYXRvKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5sb2dpbihcImFjdHVhbGl6YXJjb250cmFzZW5hL1wiK2RhdG8uY2xpZW50ZV9pZCwgZGF0by5kYXRvKS5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKTtcbiAgICB9XG59XG4iXX0=